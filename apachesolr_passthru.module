<?php
// $Id$
/**
 * Implementation of hook_views_api().
 */
function apachesolr_passthru_views_api() {
  return array('api' => '3');
}

/**
 * Implementation of hook_apachesolr_modify_query.
 */
function apachesolr_passthru_apachesolr_modify_query(&$query, &$params, $caller) {
  if ($caller == 'apachesolr_search') {
    // 'name' is already included elsewhere.
    //
    $params['fl'] .= ',address_line_1,address_line_2,address_line_3,address_line_4,company_number,postcode,sic_trade_classification_code';
  }
}

function _get_apachesolr_passthru_field_list($solr_server = NULL,$solr_port = NULL, $solr_path = NULL) {
  $data = (object) array();
  try {
    if ($solr_server == NULL || $solr_port == NULL || $solr_path == NULL) {
      $solr = apachesolr_get_solr();
    }
    else {
      $solr = apachesolr_get_solr($solr_server,$solr_port,$solr_path);
    }
    $data = $solr->getLuke();
  }
  catch (Exception $e) {
    watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    drupal_set_message(nl2br(check_plain($e->getMessage())), "warning");
    $data->fields = array();
  }

  $rows = array();
  $fields = (array)$data->fields;
  if ($fields) {
    foreach ($fields as $name => $field) {
      // Skip over 'text' because there's a special filter for that
      // already in apachesolr_views.
      //
      if ($name != 'text') {
        $rows[$name] = array($name, $field->type, isset($field->distinct) ? $field->distinct : $not_found);
      }
    }
  }
  return $rows;
}

/**
 * Implementation of hook_apachesolr_finalize_query.
 */
function apachesolr_views_query_finalize_query(&$query, &$params) {
  $params['q'] = '';
}

function apachesolr_passthru_apachesolr_search_result_alter(&$doc) {
  $doc->path = 'company/' . $doc->company_number;
  $doc->title = $doc->name;
  $doc->body = $doc->address_line_1 . ', ' . $doc->address_line_2 . ', ' . $doc->address_line_3 . ', ' . $doc->address_line_4 . ', ' . $doc->postcode;
  return $doc;
}


/**
 * Implementation of hook_apachesolr_facets().
 *
 * Returns an array keyed by block delta.
 */
function apachesolr_passthru_apachesolr_facets() {
  $facets = array();

  $fields = _get_apachesolr_passthru_field_list();

  foreach($fields as $field) {
    $key = $field[0];
    $facets[$key] = array(
      'info' => t('Filter by ' . $key),
      'facet_field' => $key,
    );
  }
  //kpr($facets);
  return $facets;
}

/**
 * Implementation of hook_block().
 */
function apachesolr_passthru_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $enabled_facets = apachesolr_get_enabled_facets('apachesolr_passthru');
      $facets = apachesolr_passthru_apachesolr_facets();
      // Add the blocks
      $blocks = array();
      foreach ($enabled_facets as $delta => $facet_field) {
        if (isset($facets[$delta])) {
          $blocks[$delta] = $facets[$delta] + array('cache' => BLOCK_CACHE_PER_PAGE);
        }
      }
      return $blocks;

    case 'view':
      if (apachesolr_has_searched()) {
        // Get the query and response. Without these no blocks make sense.
        $response = apachesolr_static_response_cache();
        if (empty($response)) {
          return;
        }
        $query = apachesolr_current_query();

        $enabled_facets = apachesolr_get_enabled_facets('apachesolr_passthru');
        $facets = apachesolr_passthru_apachesolr_facets();
        $facet = $facets[$enabled_facets[$delta]];
        if (empty($facet)) {
          return;
        }
        return apachesolr_facet_block($response, $query, 'apachesolr_passthru', $delta, $facet['facet_field'], t($facet['info']));
      }
      break;

    case 'configure':
      return apachesolr_facetcount_form('apachesolr_passthru', $delta);
      break;

    case 'save':
      apachesolr_facetcount_save($edit);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function apachesolr_passthru_theme() {
  return array();
}

/**
 * Implementation of hook_menu().
 */
function apachesolr_passthru_menu() {
 return array(
   // Callback to display solr server admin
   'admin/settings/apachesolr/otherservers' => array(
      'title' => 'Other Solr Servers',
      'description' => 'Details of other solr servers, add to make available to views.',
      'page callback' => 'apachesolr_passthru_setup',
      'access arguments' => array('administer search'),
      'type' => MENU_LOCAL_TASK,
   ),
   // Callback to add/edit server form
   'admin/settings/apachesolr/otherservers/add' => array(
      'title' => 'add/edit server',
      'description' => 'callback for adding editing a form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('apachesolr_passthru_server_form'),
      'access arguments' => array('administer search'),
      'type' => MENU_CALLBACK,
   ),
   // Callback to delete a server
 ); 
}

/**
 * Callback to display solr servers listing and administration page.
 */
 
function apachesolr_passthru_setup() {
  // Get a list of defined solr servers and display their details.
  $servers =  apachesolr_passthru_get_servers() ;

  $output_table_headers = array( 'Server Name', 'server address', 'server port', 'server path', 'status', 'action');
  $output_table_rows = array();
  foreach($servers as $server) {
    $output_table_rows[] = array($server['name'],$server['solr_url'],$server['solr_port'],$server['solr_path'],'test','test');
  }
  if (sizeof($servers) > 0 ) {
  
    $output = theme('table',$output_table_headers,$output_table_rows);
  }
  else {
    $output = t('No servers defined yet. ');  
  }
  
  $output .= l('add_server','admin/settings/apachesolr/otherservers/add');
  return $output;
}

/**
 * Defgroup: Admin form handling functions 
 */

/**
 * Generate a form for the solr server admin page.
 * @param unknown_type $form_state
 */
function apachesolr_passthru_server_form($form_state) {
  $form = array();
  
  $form['name'] = array('#type' => 'textfield',
                        '#title' => t('Server Name'));
  $form['solr_url'] = array('#type' => 'textfield',
                        '#title' => t('Server Address'));
  $form['solr_port'] = array('#type' => 'textfield',
                        '#title' => t('Server Port'));
  $form['solr_path'] = array('#type' => 'textfield',
                        '#title' => t('Server Path'));
  $form['submit_button'] = array('#type' => 'submit',
                          '#value' => t('Save Server Details'),
                          );
  $form['#submit'][] = 'apachesolr_passthru_server_form_submit';
  $form['#validate'][] = 'apachesolr_passthru_server_form_validate';
  
  return $form;
}

function apachesolr_passthru_server_form_submit(&$form, $form_state) {
  $server = array();
  $server['name'] = $form_state['values']['name'];
  $server['solr_url'] = $form_state['values']['solr_url'];
  $server['solr_port'] = $form_state['values']['solr_port'];
  $server['solr_path'] = $form_state['values']['solr_path'];
  apachesolr_passthru_add_server($server);
  drupal_goto('admin/settings/apachesolr/otherservers');
}

function apachesolr_passthru_server_form_validate(&$form, $form_state) {
  // Test a connection to the server
  $solr_host = $form_state['values']['solr_url'];
  $solr_port = $form_state['values']['solr_port'];
  $solr_path = $form_state['values']['solr_path'];
  try {
    $solr_service = apachesolr_get_solr($solr_host,$solr_port,$solr_path);
  }
  catch(Exception $e) {
    form_set_error('name', 
                   t('Problem connecting to server')); 
    drupal_set_message(nl2br(check_plain($e->getMessage())), "warning");
  }
}


/**
 * Defgroup: Solr server admin api functions
 * Use a system variable for the moment but keep a little abstraction.
 */

/**
 * Get a list of servers which are available to the apachesolr module
 */
function apachesolr_passthru_get_servers() {
  return variable_get('apachesolr_passthru_servers',array());
}

function apachesolr_passthru_get_server($server_name) {
  $servers = apachesolr_passthru_get_servers();
  // TODO validation and error checking
  return $servers[$server_name]; 
}

function apachesolr_passthru_add_server($new_server_def) {
   $servers = apachesolr_passthru_get_servers();
   // TODO a whole load of validation.
   $servers[$new_server_def['name']] = $new_server_def;
   variable_set('apachesolr_passthru_servers',$servers);
 }
 
function apachesolr_passthru_del_server($server_name) {
   $servers = apachesolr_passthru_get_servers();
   unset($servers[$server_name]);
   variable_set('apachesolr_passthru_servers',$servers);
}